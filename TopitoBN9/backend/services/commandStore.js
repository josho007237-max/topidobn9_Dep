const fs = require('fs/promises');
const path = require('path');
const { randomUUID } = require('crypto');

const DATA_DIR = path.join(__dirname, '..', 'data');
const DATA_FILE = path.join(DATA_DIR, 'bot-config.json');

const createDefaultData = () => ({
  defaultResponse: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Topito BN9! ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏£‡∏µ‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‚ú®',
  commands: [
    {
      id: randomUUID(),
      command: '/start',
      description: '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô',
      response:
        '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n\n‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Topito BN9 Assistant ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á Mini App ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ üôÇ',
      buttons: [
        {
          id: randomUUID(),
          label: '‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°',
          type: 'command',
          value: '/help',
        },
        {
          id: randomUUID(),
          label: '‡πÄ‡∏õ‡∏¥‡∏î Mini App',
          type: 'web_app',
        },
      ],
    },
    {
      id: randomUUID(),
      command: '/help',
      description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ',
      response:
        '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üõéÔ∏è',
      buttons: [
        {
          id: randomUUID(),
          label: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
          type: 'command',
          value: '/track',
        },
        {
          id: randomUUID(),
          label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô',
          type: 'command',
          value: '/support',
        },
      ],
    },
  ],
  quickReplies: [
    {
      id: randomUUID(),
      title: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
      keyword: '‡πÄ‡∏ß‡∏•‡∏≤',
      response: '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 09:00 - 18:00 ‡∏ô. ‡∏Ñ‡πà‡∏∞',
    },
    {
      id: randomUUID(),
      title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
      keyword: '‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á',
      response: '‡∏≠‡∏¢‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå /track ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞',
    },
  ],
});

async function ensureStoreReady() {
  await fs.mkdir(DATA_DIR, { recursive: true });
  try {
    await fs.access(DATA_FILE);
  } catch (error) {
    const defaults = createDefaultData();
    await fs.writeFile(DATA_FILE, JSON.stringify(defaults, null, 2), 'utf-8');
  }
}

async function readData() {
  const raw = await fs.readFile(DATA_FILE, 'utf-8');
  return JSON.parse(raw);
}

async function writeData(data) {
  await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2), 'utf-8');
}

const normaliseCommand = (command = '') => {
  const trimmed = command.trim();
  if (!trimmed) return '';
  return trimmed.startsWith('/') ? trimmed : `/${trimmed}`;
};

const sanitiseButtons = (buttons = []) =>
  buttons
    .filter((button) => button && button.label)
    .map((button) => ({
      id: button.id || randomUUID(),
      label: button.label.trim(),
      type: button.type || 'command',
      value: button.value ? button.value.trim() : undefined,
    }));

async function getConfig() {
  await ensureStoreReady();
  return readData();
}

async function addCommand(payload) {
  const data = await getConfig();
  const commandText = normaliseCommand(payload.command || '');
  if (!commandText) {
    const error = new Error('‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (command)');
    error.status = 400;
    throw error;
  }
  if (data.commands.some((item) => item.command.toLowerCase() === commandText.toLowerCase())) {
    const error = new Error('‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    error.status = 409;
    throw error;
  }
  const command = {
    id: randomUUID(),
    command: commandText,
    description: payload.description?.trim() || '',
    response: payload.response?.trim() || '',
    buttons: sanitiseButtons(payload.buttons),
  };
  data.commands.push(command);
  await writeData(data);
  return command;
}

async function updateCommand(id, payload) {
  const data = await getConfig();
  const index = data.commands.findIndex((item) => item.id === id);
  if (index === -1) {
    const error = new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    error.status = 404;
    throw error;
  }
  const commandText = payload.command ? normaliseCommand(payload.command) : data.commands[index].command;
  if (
    commandText &&
    data.commands.some((item, i) => i !== index && item.command.toLowerCase() === commandText.toLowerCase())
  ) {
    const error = new Error('‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    error.status = 409;
    throw error;
  }
  const current = data.commands[index];
  data.commands[index] = {
    ...current,
    command: commandText || current.command,
    description: payload.description !== undefined ? payload.description.trim() : current.description,
    response: payload.response !== undefined ? payload.response.trim() : current.response,
    buttons: payload.buttons ? sanitiseButtons(payload.buttons) : current.buttons,
  };
  await writeData(data);
  return data.commands[index];
}

async function removeCommand(id) {
  const data = await getConfig();
  const index = data.commands.findIndex((item) => item.id === id);
  if (index === -1) {
    const error = new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
    error.status = 404;
    throw error;
  }
  data.commands.splice(index, 1);
  await writeData(data);
}

async function addQuickReply(payload) {
  const data = await getConfig();
  const keyword = payload.keyword?.trim();
  if (!keyword) {
    const error = new Error('‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quick Reply');
    error.status = 400;
    throw error;
  }
  const quickReply = {
    id: randomUUID(),
    title: payload.title?.trim() || keyword,
    keyword,
    response: payload.response?.trim() || '',
  };
  data.quickReplies.push(quickReply);
  await writeData(data);
  return quickReply;
}

async function updateQuickReply(id, payload) {
  const data = await getConfig();
  const index = data.quickReplies.findIndex((item) => item.id === id);
  if (index === -1) {
    const error = new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Quick Reply ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    error.status = 404;
    throw error;
  }
  const current = data.quickReplies[index];
  const keyword = payload.keyword ? payload.keyword.trim() : current.keyword;
  data.quickReplies[index] = {
    ...current,
    title: payload.title !== undefined ? payload.title.trim() : current.title,
    keyword,
    response: payload.response !== undefined ? payload.response.trim() : current.response,
  };
  await writeData(data);
  return data.quickReplies[index];
}

async function removeQuickReply(id) {
  const data = await getConfig();
  const index = data.quickReplies.findIndex((item) => item.id === id);
  if (index === -1) {
    const error = new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Quick Reply ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
    error.status = 404;
    throw error;
  }
  data.quickReplies.splice(index, 1);
  await writeData(data);
}

async function setDefaultResponse(text) {
  const data = await getConfig();
  data.defaultResponse = text?.trim() || '';
  await writeData(data);
}

module.exports = {
  ensureStoreReady,
  getConfig,
  addCommand,
  updateCommand,
  removeCommand,
  addQuickReply,
  updateQuickReply,
  removeQuickReply,
  setDefaultResponse,
};
